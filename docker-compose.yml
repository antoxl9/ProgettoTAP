version: '3.8'

services:

  ############### logstash ###############            
 
  logstash:
    build:
      context: logstash
      dockerfile: dockerfile
    image: logstash
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
    environment:
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
      - "xpack.monitoring.enabled:true"
      - "xpack.monitoring.elasticsearch.url:http://localhost:9200"
    ports:
      - "10155:10155"
    networks:
      - astrokg-network


  ############### Data-server ###############               

  data-server:
    container_name: data-server-container
    build:
      context: server
      dockerfile: dockerfile
    image: data-server
    ports:
      - "5000:5000"
    networks:
      - astrokg-network



  ############### Zookeeper ###############                     

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - astrokg-network


  ############### Kafka ###############                     

  kafkaserver:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafkaserver
    hostname: kafkaserver
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkaserver:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - astrokg-network

  
  ############### Kafka UI ###############                  
  
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - kafkaserver
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafkaserver:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - astrokg-network


  ############### Init Kafka ###############                

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    networks:
      - astrokg-network
    depends_on:
      - kafkaserver
      - zookeeper
      - kafka-ui
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafkaserver:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafkaserver:9092 --create --if-not-exists --topic datitranscript --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafkaserver:9092 --list
      "

 ############## NEO4J ###############
  neo4j:
    image: neo4j:latest
    ports:
      - '7474:7474'  # HTTP Bolt port
      - '7687:7687'  # Bolt port
    # volumes:
    #   
    volumes:
        - ./data:/data
    environment:
       -  NEO4J_AUTH=neo4j/password
    networks:
      - astrokg-network


 ############## SPARK ###############
  spark:
    build: 
      context: Spark
    container_name: spark-streaming
    depends_on:
      - kafkaserver
      - logstash
      - neo4j
  
    restart: on-failure 
    networks:
      - astrokg-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8g
    command: spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2 --master local[*] streaming.py

      

networks:
  astrokg-network:
    name: astrokg-network
    driver: bridge

volumes:
  certs:
    driver: local



